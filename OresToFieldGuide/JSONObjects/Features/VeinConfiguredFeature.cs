using System.Text.Json.Serialization;

namespace OresToFieldGuide
{
	public class VeinConfiguredFeature(Vein vein, Dictionary<string, Rock> rockDict, Dictionary<string, Ore> oreDict)
	{
		[JsonPropertyName("__credits__")]
		public string Credits => "This vein was automatically generated by OresToFieldGuide.";

		[JsonPropertyName("type")]
		public string Type { get; set; } = vein.Type;

		[JsonPropertyName("config")]
		public VeinData Data { get; set; } = vein.Type switch
		{
			"tfc:cluster_vein" => new ClusterVeinData(vein, rockDict, oreDict),
			"tfc:disc_vein" => new DiscVeinData(vein, rockDict, oreDict),
			_ => new PipeVeinData(vein, rockDict, oreDict),
		};
	}

	[JsonDerivedType(typeof(ClusterVeinData))]
	[JsonDerivedType(typeof(DiscVeinData))]
	[JsonDerivedType(typeof(PipeVeinData))]
	public class VeinData(Vein vein, Dictionary<string, Rock> rockDict, Dictionary<string, Ore> oreDict)
	{
		[JsonPropertyName("rarity")]
		public int Rarity { get; set; } = vein.Config.Rarity;

		[JsonPropertyName("density")]
		public double Density { get; set; } = vein.Config.Density;

		[JsonPropertyName("min_y")]
		public int MinY { get; set; } = vein.Config.MinY;

		[JsonPropertyName("max_y")]
		public int MaxY { get; set; } = vein.Config.MaxY;

		[JsonPropertyName("random_name")]
		public string? RandomName { get; set; } = vein.ID;

		[JsonPropertyName("blocks")]
		public IEnumerable<VeinBlock> Blocks { get; set; } = vein.Rocks.Select(rock => new VeinBlock(rockDict[rock], vein, oreDict));

		[JsonPropertyName("indicator")]
		public IndicatorConfig Indicator { get; set; } = vein.Indicator!;
	}

	public class ClusterVeinData(Vein vein, Dictionary<string, Rock> rockDict, Dictionary<string, Ore> oreDict) : VeinData(vein, rockDict, oreDict)
	{
		[JsonPropertyName("size")]
		public int Size { get; set; } = vein.Config.Size;
	}

	public class DiscVeinData(Vein vein, Dictionary<string, Rock> rockDict, Dictionary<string, Ore> oreDict) : VeinData(vein, rockDict, oreDict)
	{
		[JsonPropertyName("height")]
		public int Height { get; set; } = vein.Config.Height;

		[JsonPropertyName("size")]
		public int Size { get; set; } = vein.Config.Size;
	}

	public class PipeVeinData(Vein vein, Dictionary<string, Rock> rockDict, Dictionary<string, Ore> oreDict) : VeinData(vein, rockDict, oreDict)
	{
		[JsonPropertyName("height")]
		public int Height { get; set; } = vein.Config.Height;

		[JsonPropertyName("radius")]
		public int Radius { get; set; } = vein.Config.Radius;

		[JsonPropertyName("min_skew")]
		public int MinSkew { get; set; } = vein.Config.MinSkew;

		[JsonPropertyName("max_skew")]
		public int MaxSkew { get; set; } = vein.Config.MaxSkew;

		[JsonPropertyName("min_slant")]
		public int MinSlant { get; set; } = vein.Config.MinSlant;

		[JsonPropertyName("max_slant")]
		public int MaxSlant { get; set; } = vein.Config.MaxSlant;

		[JsonPropertyName("sign")]
		public double Sign { get; set; } = vein.Config.Sign;
	}

	public class VeinBlock
	{
		[JsonPropertyName("replace")]
		public IEnumerable<string> Replace { get; set; }

		[JsonPropertyName("with")]
		public IEnumerable<VeinBlockReplaceWith> With { get; set; }

		public VeinBlock(Rock rock, Vein vein, Dictionary<string, Ore> oreDict)
		{
			Replace = rock.ReplaceableBlocks;

			var list = new List<VeinBlockReplaceWith>();

			foreach (var wb in vein.Ores)
			{
				var ore = oreDict[wb.OreID];

				list.Add(new VeinBlockReplaceWith(string.Format(rock.Pattern, wb.OreID), wb.Weight));

				if (wb.FullBlockWeight.HasValue)
				{
					list.Add(new VeinBlockReplaceWith(ore.FullOreBlock, wb.FullBlockWeight.Value));
				}
			}

			With = list;
		}
	}

	public class VeinBlockReplaceWith(string block, int weight)
	{
		[JsonPropertyName("block")]
		public string Block { get; set; } = block;

		[JsonPropertyName("weight")]
		public int Weight { get; set; } = weight;
	}
}
